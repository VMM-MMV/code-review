# workflow:
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "web"

stages:
  - release
  - build

image: python:3.11-slim

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip

# before_script:


docker-build:
  stage: release
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint:
      - ''
  variables:
    # Define the full image name including the registry, project path, and tag
    # CI_REGISTRY: Your project's registry address (e.g., registry.gitlab.com)
    # CI_PROJECT_PATH: Your project's path within the registry (e.g., your-namespace/your-project)
    # CI_COMMIT_SHORT_SHA: The short commit hash (useful for unique tags)
    DOCKER_IMAGE_NAME: "$CI_REGISTRY/$CI_PROJECT_PATH/devai-cli:$CI_COMMIT_SHORT_SHA"
    DOCKER_IMAGE_NAME_LATEST: "$CI_REGISTRY/$CI_PROJECT_PATH/devai-cli:latest" # Optional: Tag with latest as well
  script:
    - echo "IMAGE_API = $DOCKER_IMAGE_NAME_LATEST"
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"gitlab-ci-token\",\"password\":\"$CI_JOB_TOKEN\"}}}"
      > /kaniko/.docker/kaniko-config.json
    - "/kaniko/executor --snapshot-mode=redo --use-new-run --cache=true --context $CI_PROJECT_DIR
    --dockerfile $CI_PROJECT_DIR/Dockerfile -d $DOCKER_IMAGE_NAME_LATEST"

  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile



build-job:
  stage: build
  script:
    - apt-get update && apt-get install -y git
    - python --version ; pip --version  # For debugging
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - cd devai-cli/src
    - pip install -r requirements.txt
    - pip install --editable .
    - cd ../..
    - export GOOGLE_CLOUD_CREDENTIALS=$(echo $GOOGLE_CLOUD_CREDENTIALS)    
    - export PROJECT_ID=$(echo $PROJECT_ID)
    - export LOCATION=$(echo $LOCATION)

    - export LANGCHAIN_TRACING_V2=$(echo $LANGCHAIN_TRACING_V2)
    - export LANGCHAIN_ENDPOINT=$(echo $LANGCHAIN_ENDPOINT)
    - export LANGCHAIN_API_KEY=$(echo $LANGCHAIN_API_KEY)

    - export JIRA_API_TOKEN=$(echo $JIRA_API_TOKEN)
    - export JIRA_USERNAME=$(echo $JIRA_USERNAME)
    - export JIRA_INSTANCE_URL=$(echo $JIRA_INSTANCE_URL)
    - export JIRA_PROJECT_KEY=$(echo $JIRA_PROJECT_KEY)
    - export JIRA_CLOUD=true

    - export GITLAB_PERSONAL_ACCESS_TOKEN=$(echo $GITLAB_PERSONAL_ACCESS_TOKEN)
    - export GITLAB_URL=$(echo $GITLAB_URL)
    - export GITLAB_REPOSITORY=$(echo $GITLAB_REPOSITORY)
    - export GITLAB_BRANCH=$(echo $GITLAB_BRANCH)
    - export GITLAB_BASE_BRANCH=$(echo $GITLAB_BASE_BRANCH)

    - export GOOGLE_CLOUD_CREDENTIALS=$(echo $GOOGLE_CLOUD_CREDENTIALS)
    - echo $GOOGLE_CLOUD_CREDENTIALS > service-account-key.json
    - export GOOGLE_APPLICATION_CREDENTIALS="service-account-key.json"

    - devai review testcoverage -c ./sample-app/src
    - devai review code -c ./sample-app/src/main/java/anthos/samples/bankofanthos/balancereader
    - devai review compliance --context ./sample-app/k8s --config ./devai-cli/gemini/styleguide.md
    - devai review performance -c ./sample-app/src/main/java/anthos/samples/bankofanthos/balancereader
    - devai review security -c ./sample-app/src/main/java/anthos/samples/bankofanthos/balancereader
    - devai review blockers -c ./sample-app/pom.xml
